# person of interest is not in the
defect.t <- rbinom(length(n.pieces), size = 1, defect.normal)
}
# turn this into data frame
data.t <- cbind.data.frame(name.batch.t, unique.ID.t,person.1.t, person.2.t,
defect.t)
colnames(data.t) <- names.col
# let's put this into the big data frame all.data
all.data <- rbind.data.frame(all.data, data.t)
}
all.data
n.batch <- c(1:50)
n.pieces <- c(1:10)
people <- c("Nora", "Thor", "Jimmy")
defect.normal <- 0.1
defect.high <- c(0.9)
defect.person <- "Thor"
# let's make a data set
names.col <- c("batch", "unique.ID", "person.1", "person.2", "defect")
all.data <- as.data.frame(matrix(NA, nrow = 1,
ncol = length(names.col)))
head(all.data)
colnames(all.data) <- names.col
#all.data$unique.ID <- as.character(all.data$unique.ID)
#all.data$person.1 <- as.character(all.data$person.1)
#all.data$person.2 <- as.character(all.data$person.2)
for(i in 1:length(n.batch)){
# i <- 1
name.batch.t <- rep(n.batch[i], length(n.pieces))
unique.ID.t <- paste( rep(n.batch[i], length(n.pieces)), n.pieces, sep = "." )
people.t <- sample(people, 2)
person.1.t <- rep(people.t[1], length(n.pieces))
person.2.t <- rep(people.t[2], length(n.pieces))
# let's add a defect based on the person
# if thor is involved, defect rates goes to person.defect
if(people.t[1] == defect.person || people.t[2] == defect.person){
# persin is the 'defect person' so high faillure rate
defect.t <- rbinom(length(n.pieces), size = 1, defect.high)
}else{
# person of interest is not in the
defect.t <- rbinom(length(n.pieces), size = 1, defect.normal)
}
# turn this into data frame
data.t <- cbind.data.frame(name.batch.t, unique.ID.t,person.1.t, person.2.t,
defect.t)
colnames(data.t) <- names.col
# let's put this into the big data frame all.data
all.data <- rbind.data.frame(all.data, data.t)
}
str(all.data)
library(MASS)
stepAIC(m.full)
head(mtcars)
str(mtcars)
m.full <- lm(mpg ~ disp + hp + cyl + gear, data=mtcars)
summary(m.full)
m.full.1 <- aov(mpg ~ gear + disp  + hp + cyl , data=mtcars)
summary(m.full.1)
m.full.2 <- aov(mpg ~  disp + wt + hp + cyl + gear , data=mtcars)
summary(m.full.2)
library(MASS)
stepAIC(m.full)
install.packages("AICcmodavg")
library(AICcmodavg)
aictab(m.full)
models <- c(m.full, m.full.2)
model.names <- c("full", "fuller")
aictab(models, model.names)
m.full <- lm(mpg ~ disp + hp + cyl + gear, data=mtcars)
summary(m.full)
m.no.gear <- lm(mpg ~ disp + hp + cyl, data=mtcars)
m.no.cyl <- lm(mpg ~ disp + hp  + gear, data=mtcars)
models <- c(m.full, m.no.gear, m.no.cyl)
model.names <- c("full", "no.gear", "no.cyl")
library(AICcmodavg)
aictab(models, model.names)
models
m.full <- lm(mpg ~ disp + hp + cyl + gear, data=mtcars)
summary(m.full)
m.no.gear <- lm(mpg ~ disp + hp + cyl, data=mtcars)
m.no.cyl <- lm(mpg ~ disp + hp  + gear, data=mtcars)
models <- c(m.full, m.no.gear, m.no.cyl)
model.names <- c("full", "no.gear", "no.cyl")
aictab(models, model.names)
extractAIC(m.full)
step(m.full)
summary(m.full)
# disp is least significant
m.1 <- lm(mpg ~ hp + cyl + gear, data=mtcars)
summary(m.1)
# does removing this variable significantly reduces the variance explained?
anova(m.full, m.1)
summary(m.1)
# what is the next least significant variable?
# cyl
m.2 <- lm(mpg ~ hp + gear, data=mtcars)
summary(m.2)
# does removing this variable significantly reduces the variance explained?
anova(m.1, m.2)
summary(m.2)
# does removing this variable significantly reduces the variance explained?
anova(m.full, m.1)
summary(m.full)
# does removing this variable significantly reduces the variance explained?
anova(m.full, m.1)
summary(m.2)
# what is the next one?
# gear, but it is significant... --> know the drill, check the summary(m.2)
m.3 <- lm(mpg ~ hp , data=mtcars)
summary(m.3)
anova(m.2, m.3)
library(MASS)
step(m.full)
n.batch <- c(1:50)
n.pieces <- c(1:10)
people <- c("Nora", "Thor", "Jimmy")
defect.normal <- 0.1
defect.high <- c(0.9)
defect.person <- "Thor"
# let's make a data set
names.col <- c("batch", "unique.ID", "person.1", "person.2", "temp", "defect")
all.data <- as.data.frame(matrix(NA, nrow = 1,
ncol = length(names.col)))
head(all.data)
colnames(all.data) <- names.col
colnames(all.data) <- names.col
all.data
i <- 1
name.batch.t <- rep(n.batch[i], length(n.pieces))
unique.ID.t <- paste( rep(n.batch[i], length(n.pieces)), n.pieces, sep = "." )
people.t <- sample(people, 2)
person.1.t <- rep(people.t[1], length(n.pieces))
person.2.t <- rep(people.t[2], length(n.pieces))
temp.bad.good[1]
# temperature
# assume failure rate higher with lower temps
# min and max temp below /above which you have high prob failure or success
temp.bad.good <- c(200, 300)
temp.bad.good[1]
runif(1, temp.bad.good[1], temp.bad.good[2])
temp.t <- rep(round(runif(1, temp.bad.good[1], temp.bad.good[2]),2),
length(n.pieces))
temp.t
# defects for different variables
# define which variable determines the defect
var.defect <- "temp"
temp.bad.good[2] -  temp.bad.good[1]
temp.range <- temp.bad.good[2] -  temp.bad.good[1]
temp.t - temp.bad.good[1]
temp.t[1] - temp.bad.good[1]
temp.t[1] - temp.bad.good[1]/temp.range
temp.range
(temp.t[1] - temp.bad.good[1])/temp.range
temp.t[1]
temp.t
temp.bad.good[2]
temp.bad.good[1]
(temp.t[1] - temp.bad.good[1])/temp.range
prob.success <- (temp.t[1] - temp.bad.good[1])/temp.range
rbinom(length(n.pieces), size = 1, prob.success)
rbinom(length(n.pieces), size = 1, prob.success)
rbinom(length(n.pieces), size = 1, prob.success)
rbinom(length(n.pieces), size = 1, prob.success)
rbinom(length(n.pieces), size = 1, prob.success)
rbinom(length(n.pieces), size = 1, prob.success)
rbinom(length(n.pieces), size = 1, prob.success)
rbinom(length(n.pieces), size = 1, prob.success)
rbinom(length(n.pieces), size = 1, prob.success)
# defects for different variables
# define which variable determines the defect
var.defect <- "temp"
n.batch <- c(1:50)
n.pieces <- c(1:10)
people <- c("Nora", "Thor", "Jimmy")
# let's make a data set
names.col <- c("batch", "unique.ID", "person.1", "person.2", "temp", "defect")
all.data <- as.data.frame(matrix(NA, nrow = 1,
ncol = length(names.col)))
head(all.data)
colnames(all.data) <- names.col
#all.data$unique.ID <- as.character(all.data$unique.ID)
#all.data$person.1 <- as.character(all.data$person.1)
#all.data$person.2 <- as.character(all.data$person.2)
# defects for different variables
# define which variable determines the defect
var.defect <- "temp"
# people
defect.normal <- 0.1
defect.high <- c(0.9)
defect.person <- "Thor"
# temperature
# assume failure rate higher with lower temps
# min and max temp below /above which you have high prob failure or success
temp.bad.good <- c(200, 300)
i <- 1
name.batch.t <- rep(n.batch[i], length(n.pieces))
unique.ID.t <- paste( rep(n.batch[i], length(n.pieces)), n.pieces, sep = "." )
people.t <- sample(people, 2)
person.1.t <- rep(people.t[1], length(n.pieces))
person.2.t <- rep(people.t[2], length(n.pieces))
# make temp
temp.t <- rep(round(runif(1, temp.bad.good[1], temp.bad.good[2]),2),
length(n.pieces))
# ----add defects linked with specific variable
if(var.defect == "temp"){
# determine probability defect
# what is temperate range?
temp.range <- temp.bad.good[2] -  temp.bad.good[1]
prob.success <- (temp.t[1] - temp.bad.good[1])/temp.range
# draw defects from
defect.t <- rbinom(length(n.pieces), size = 1, prob.success)
}
if(var.defect == "person"){
# let's add a defect based on the person
# if thor is involved, defect rates goes to person.defect
if(people.t[1] == defect.person || people.t[2] == defect.person){
# persin is the 'defect person' so high faillure rate
defect.t <- rbinom(length(n.pieces), size = 1, defect.high)
}else{
# person of interest is not in the
defect.t <- rbinom(length(n.pieces), size = 1, defect.normal)
}
}
data.t <- cbind.data.frame(name.batch.t, unique.ID.t,person.1.t, person.2.t,
temp.t, defect.t)
colnames(data.t) <- names.col
data.t
prob.success
rbinom(length(n.pieces), size = 1, prob.success)
var.defect == "temp"
var.defect == "person"
# temperature
# assume failure rate higher with lower temps
# min and max temp below /above which you have high prob success or failure
# we assume high temp = more failure (coded as a 1)
temp.bad.good <- c(200, 300)
temp.t[1]
(temp.t[1] - temp.bad.good[1])
temp.range
#
#
#
n.batch <- c(1:50)
n.pieces <- c(1:10)
people <- c("Nora", "Thor", "Jimmy")
# let's make a data set
names.col <- c("batch", "unique.ID", "person.1", "person.2", "temp", "defect")
all.data <- as.data.frame(matrix(NA, nrow = 1,
ncol = length(names.col)))
head(all.data)
colnames(all.data) <- names.col
#all.data$unique.ID <- as.character(all.data$unique.ID)
#all.data$person.1 <- as.character(all.data$person.1)
#all.data$person.2 <- as.character(all.data$person.2)
# defects for different variables
# define which variable determines the defect
var.defect <- "temp"
# people
defect.normal <- 0.1
defect.high <- c(0.9)
defect.person <- "Thor"
# temperature
# assume failure rate higher with lower temps
# min and max temp below /above which you have high prob success or failure
# we assume high temp = more failure (coded as a 1)
temp.bad.good <- c(200, 300)
for(i in 1:length(n.batch)){
# i <- 1
name.batch.t <- rep(n.batch[i], length(n.pieces))
unique.ID.t <- paste( rep(n.batch[i], length(n.pieces)), n.pieces, sep = "." )
people.t <- sample(people, 2)
person.1.t <- rep(people.t[1], length(n.pieces))
person.2.t <- rep(people.t[2], length(n.pieces))
# make temp
temp.t <- rep(round(runif(1, temp.bad.good[1], temp.bad.good[2]),2),
length(n.pieces))
# ----add defects linked with specific variable
if(var.defect == "temp"){
# determine probability defect
# what is temperate range?
temp.range <- temp.bad.good[2] -  temp.bad.good[1]
prob.fail <- (temp.t[1] - temp.bad.good[1])/temp.range
# draw defects from
defect.t <- rbinom(length(n.pieces), size = 1, prob.fail)
}
if(var.defect == "person"){
# let's add a defect based on the person
# if thor is involved, defect rates goes to person.defect
if(people.t[1] == defect.person || people.t[2] == defect.person){
# persin is the 'defect person' so high faillure rate
defect.t <- rbinom(length(n.pieces), size = 1, defect.high)
}else{
# person of interest is not in the
defect.t <- rbinom(length(n.pieces), size = 1, defect.normal)
}
}
# turn this into data frame
data.t <- cbind.data.frame(name.batch.t, unique.ID.t,person.1.t, person.2.t,
temp.t, defect.t)
colnames(data.t) <- names.col
# let's put this into the big data frame all.data
all.data <- rbind.data.frame(all.data, data.t)
}
str(all.data)
str(all.data)
all.data
str(all.data)
model <- glm(defect ~ temp, family=binomial(link='logit'), data=all.data)
summary(model)
#
#
#
n.batch <- c(1:50)
n.pieces <- c(1:10)
people <- c("Nora", "Thor", "Jimmy")
# let's make a data set
names.col <- c("batch", "unique.ID", "person.1", "person.2", "temp", "defect")
all.data <- as.data.frame(matrix(NA, nrow = 1,
ncol = length(names.col)))
head(all.data)
colnames(all.data) <- names.col
#all.data$unique.ID <- as.character(all.data$unique.ID)
#all.data$person.1 <- as.character(all.data$person.1)
#all.data$person.2 <- as.character(all.data$person.2)
# defects for different variables
# define which variable determines the defect
var.defect <- "temp"
# people
defect.normal <- 0.1
defect.high <- c(0.9)
defect.person <- "Thor"
# temperature
# assume failure rate higher with lower temps
# min and max temp below /above which you have high prob success or failure
# we assume high temp = more failure (coded as a 1)
temp.bad.good <- c(200, 3000)
for(i in 1:length(n.batch)){
# i <- 1
name.batch.t <- rep(n.batch[i], length(n.pieces))
unique.ID.t <- paste( rep(n.batch[i], length(n.pieces)), n.pieces, sep = "." )
people.t <- sample(people, 2)
person.1.t <- rep(people.t[1], length(n.pieces))
person.2.t <- rep(people.t[2], length(n.pieces))
# make temp
temp.t <- rep(round(runif(1, temp.bad.good[1], temp.bad.good[2]),2),
length(n.pieces))
# ----add defects linked with specific variable
if(var.defect == "temp"){
# determine probability defect
# what is temperate range?
temp.range <- temp.bad.good[2] -  temp.bad.good[1]
prob.fail <- (temp.t[1] - temp.bad.good[1])/temp.range
# draw defects from
defect.t <- rbinom(length(n.pieces), size = 1, prob.fail)
}
if(var.defect == "person"){
# let's add a defect based on the person
# if thor is involved, defect rates goes to person.defect
if(people.t[1] == defect.person || people.t[2] == defect.person){
# persin is the 'defect person' so high faillure rate
defect.t <- rbinom(length(n.pieces), size = 1, defect.high)
}else{
# person of interest is not in the
defect.t <- rbinom(length(n.pieces), size = 1, defect.normal)
}
}
# turn this into data frame
data.t <- cbind.data.frame(name.batch.t, unique.ID.t,person.1.t, person.2.t,
temp.t, defect.t)
colnames(data.t) <- names.col
# let's put this into the big data frame all.data
all.data <- rbind.data.frame(all.data, data.t)
}
str(all.data)
# ---- analyse the data -----
#
#
model <- glm(defect ~ temp, family=binomial(link='logit'), data=all.data)
summary(model)
#
#
#
n.batch <- c(1:50)
n.pieces <- c(1:10)
people <- c("Nora", "Thor", "Jimmy")
# let's make a data set
names.col <- c("batch", "unique.ID", "person.1", "person.2", "temp", "defect")
all.data <- as.data.frame(matrix(NA, nrow = 1,
ncol = length(names.col)))
head(all.data)
colnames(all.data) <- names.col
#all.data$unique.ID <- as.character(all.data$unique.ID)
#all.data$person.1 <- as.character(all.data$person.1)
#all.data$person.2 <- as.character(all.data$person.2)
# defects for different variables
# define which variable determines the defect
var.defect <- "temp"
# people
defect.normal <- 0.1
defect.high <- c(0.9)
defect.person <- "Thor"
# temperature
# assume failure rate higher with lower temps
# min and max temp below /above which you have high prob success or failure
# we assume high temp = more failure (coded as a 1)
temp.bad.good <- c(200, 300)
for(i in 1:length(n.batch)){
# i <- 1
name.batch.t <- rep(n.batch[i], length(n.pieces))
unique.ID.t <- paste( rep(n.batch[i], length(n.pieces)), n.pieces, sep = "." )
people.t <- sample(people, 2)
person.1.t <- rep(people.t[1], length(n.pieces))
person.2.t <- rep(people.t[2], length(n.pieces))
# make temp
temp.t <- rep(round(runif(1, temp.bad.good[1], temp.bad.good[2]),2),
length(n.pieces))
# ----add defects linked with specific variable
if(var.defect == "temp"){
# determine probability defect
# what is temperate range?
temp.range <- temp.bad.good[2] -  temp.bad.good[1]
prob.fail <- (temp.t[1] - temp.bad.good[1])/temp.range
# draw defects from
defect.t <- rbinom(length(n.pieces), size = 1, prob.fail)
}
if(var.defect == "person"){
# let's add a defect based on the person
# if thor is involved, defect rates goes to person.defect
if(people.t[1] == defect.person || people.t[2] == defect.person){
# persin is the 'defect person' so high faillure rate
defect.t <- rbinom(length(n.pieces), size = 1, defect.high)
}else{
# person of interest is not in the
defect.t <- rbinom(length(n.pieces), size = 1, defect.normal)
}
}
# turn this into data frame
data.t <- cbind.data.frame(name.batch.t, unique.ID.t,person.1.t, person.2.t,
temp.t, defect.t)
colnames(data.t) <- names.col
# let's put this into the big data frame all.data
all.data <- rbind.data.frame(all.data, data.t)
}
str(all.data)
# ---- analyse the data -----
#
#
model <- glm(defect ~ temp, family=binomial(link='logit'), data=all.data)
summary(model)
# use the standard data set mtcars
head(mtcars)
str(mtcars)
m.full <- lm(mpg ~ disp + hp + cyl + gear, data=mtcars)
plot(m.full)
# use the standard data set mtcars
head(mtcars)
str(mtcars)
m.full <- lm(mpg ~ disp + hp + cyl + gear, data=mtcars)
plot(m.full)
plot(m.full)
# use the standard data set mtcars
head(mtcars)
str(mtcars)
m.full <- lm(mpg ~ disp + hp + cyl + gear, data=mtcars)
plot(m.full)
u
summary(m.full)
m.no.gear <- lm(mpg ~ disp + hp + cyl, data=mtcars)
summary(m.no.gear)
anova(m.full, m.no.gear)
summary(m.full)
# disp is least significant
m.1 <- lm(mpg ~ hp + cyl + gear, data=mtcars)
summary(m.1)
# does removing this variable significantly reduces the variance explained?
anova(m.full, m.1)
summary(m.1)
m.2 <- lm(mpg ~ hp + gear, data=mtcars)
summary(m.2)
# does removing this variable significantly reduces the variance explained?
anova(m.1, m.2)
summary(m.1)
# does removing this variable significantly reduces the variance explained?
anova(m.full, m.1)
summary(m.1)
summary(m.2)
m.only.cyl <- lm(mpg ~ cyl, data=mtcars)
summary(m.only.cyl)
corr(m.full)
install.packages("corrplot")
#m.no.gear <- lm(mpg ~ disp + hp + cyl, data=mtcars)
#summary(m.no.gear)
#anova(m.full, m.no.gear)
library(corrplot)
rquery.cormat(m.full)
# use the standard data set mtcars
head(mtcars)
str(mtcars)
rquery.cormat(c(2:4,10))
#m.no.gear <- lm(mpg ~ disp + hp + cyl, data=mtcars)
#summary(m.no.gear)
#anova(m.full, m.no.gear)
library(corrplot)
rquery.cormat(c(2:4,10))
m.full.1 <- aov(mpg ~ gear + disp  + hp + cyl , data=mtcars)
summary(m.full.1)
m.full.2 <- aov(mpg ~  disp + wt + hp + cyl + gear , data=mtcars)
summary(m.full.2)
summary(m.full.1)
summary(m.full.2)
library(MASS)
step(m.full)
