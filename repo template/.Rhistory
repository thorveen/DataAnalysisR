getwd()
R.version.string
# === general ==================================================================
## 1.main.R
## the first file a user should use and run as it contains information  critical
## to run the whole project
# authors:
#
# R version
R.version.string
# "R version 4.1.2 (2021-11-01)"
#
# NOTE: run the 1.main.R before starting your session.
#
## the '##' are extra comments, delete when using this as template
## use the icon with horizontal lines next to source at the top of this window
## to get the table of content
# === notes ====================================================================
# various comments
# • numbering of files and folder is done to group based on same file type
#   (folders, scripts and markdown files together in same sequence)
# •
# •
#
## I often use this as a 'to do' list
#
# === script index =============================================================
## the different script files of your analysis workflow
## numbering names will make sure they are nicely ordered
# 1.main.R
# 2.data.manip.R
# 3.analysis.R
## for big projects you may want to have multiple analysis files
## big project may also require you to write and store functions in a script
# 4.functions.R
## and this can apply to figure functions too
# 5.figures.R
#
# === global variables =========================================================
## declare variables that will be used across the project and should not be
## changed. For example names, or a range of e.g. dates selected, etc
wk.dir <- getwd() # location of thee working directory
## var.name.1 <- "something" # important variable doing....
## var.name.2 <- "something.different" #
# === libraries ================================================================
# install libraries needed for the project
#install.packages("name.of.package")
# load the libraries needed for the project to run
#library(name.of.package) #....
# === folder management ========================================================
## names of project folders("a.figures","b.data.raw","c.data.clean","d.results")
## store names of the folders in an object
# folder names
## the a b c makes them ordered again, but not
folder.names <- c("a.data.raw","b.data.clean", "c.results","d.figures")
folder.names
# create folders if they don't exit yet.
for(i in 1:length(folder.names)){
if(file.exists(folder.names[i]) == FALSE){
dir.create(folder.names[i])
}
}
# paths to the folders. The 'p.' indicates the variable is a path.
# make sure the variable names describe the folder.names
p.data.raw <- paste(wk.dir, "/", folder.names[1], "/", sep = "")
p.data.clean <- paste(wk.dir, "/", folder.names[2], "/", sep = "")
p.results <- paste(wk.dir, "/", folder.names[3], "/", sep = "")
p.fig <- paste(wk.dir, "/", folder.names[4], "/", sep = "")
p.data.raw
---
title: "markdown example.simple"
output: html_document
---
Markdown has *all* kinds of **options** for text lay^out^ including different levels of headers.
# Big
## Big-ish
### Medium
The great thing is that you can mix the text and and the code. If you don't want the code to be shown, you just type 'echo = FALSE. In general this is a good method for small-ish code projects. I find that it gets quite messy quickly, with your R code more fragmented.
If you just read one summary file you can do it this way, or you want to do a couple of analyses only, and each go into a new markdown file.
Let's start an analyses.
```{r}
# simulate data for x and y
x.t <- rnorm(10, 5, 2)
y.t <- rnorm(10, 6, 1)
```
If we do 'echo = FALSE' we only get what you output, here a graph.
```{r, echo=FALSE}
# produce a plot of x and y
plot(x.t, y.t, xlab = "x variable", ylab = "y variable", pch = 19, col = "blue", las = 1)
```
### random stats
Let's do some stats.
```{r, echo=FALSE}
summary(lm(y.t ~ x.t))
```
It is easy to add things inline, for example the p = `r  summary(lm(y.t ~ x.t))$coefficient[2, 4]` value for the test if the slope is different from 0. This is quite handy as it will be updated when we add more data or redo the analyses (rerun and the p value should change with new data).
Wicked. Of course we can use standard R functions like *round()* to make it better p = `r  round(summary(lm(y.t ~ x.t))$coefficient[2, 4],3)`
There are some other tricks to e.g. format a formula etc but it is less sophisticated than LateX for example. For me it is mainly useful for a working document, not really a manuscript.
---
title: "markdown example.simple"
output: html_document
---
Markdown has *all* kinds of **options** for text lay^out^ including different levels of headers.
# Big
## Big-ish
### Medium
The great thing is that you can mix the text and and the code. If you don't want the code to be shown, you just type 'echo = FALSE. In general this is a good method for small-ish code projects. I find that it gets quite messy quickly, with your R code more fragmented.
If you just read one summary file you can do it this way, or you want to do a couple of analyses only, and each go into a new markdown file.
Let's start an analyses.
```{r}
# simulate data for x and y
x.t <- rnorm(10, 5, 2)
y.t <- rnorm(10, 6, 1)
```
If we do 'echo = FALSE' we only get what you output, here a graph.
```{r, echo=FALSE}
# produce a plot of x and y
plot(x.t, y.t, xlab = "x variable", ylab = "y variable", pch = 19, col = "blue", las = 1)
```
### random stats
Let's do some stats.
```{r, echo=FALSE}
summary(lm(y.t ~ x.t))
```
It is easy to add things inline, for example the p = `r  summary(lm(y.t ~ x.t))$coefficient[2, 4]` value for the test if the slope is different from 0. This is quite handy as it will be updated when we add more data or redo the analyses (rerun and the p value should change with new data).
Wicked. Of course we can use standard R functions like *round()* to make it better p = `r  round(summary(lm(y.t ~ x.t))$coefficient[2, 4],3)`
There are some other tricks to e.g. format a formula etc but it is less sophisticated than LateX for example. For me it is mainly useful for a working document, not really a manuscript.
---
title: "markdown.analysis"
author: "Thor Veen"
date: "13/01/2021"
output: html_document
---
```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
read_chunk("4.markdown.analysis.R")
```
For this analysis we segmented code in the R script 4.markdown.analysis.R into code chunks and named them. In the Markdown file you can now call these chunks by their names.
## data inspection
Check the Iris data set
```{r one, echo = FALSE}
```
## analysis
Let's see of the sepal width differs among the species.
Show the coefficient table
```{r three, echo = TRUE}
```
## visualisation
Plot the sepal width vs height. Show all the code (echo = TRUE, the default)
```{r two, echo = TRUE}
```
# === description ===========================================================================
# scrip with analysis to show how to link Markdown and analysis code
# ******************************************************************************
## use descriptive names
# 1) data inspection
# 2) visualisation
# 3) analysis
# === 1) data inspection =======================================================
## @knitr one.analysis
# let's see the first six rows of the iris data set
d <- 3
d
## @knitr one
head(iris)
## @knitr one.end
# === 2) visualisation ===========================================================
## @knitr two
# let's make a graph of the sepal length vs sepal width
plot(iris$Sepal.Length, iris$Sepal.Width, xlab = "sepal length (cm)", ylab =
"sepal width (cm)", pch = 19, col = "grey")
# === 3) analysis ===========================================================
## @knitr three
# test of the sepal width differs for different species
m1 <- lm(iris$Sepal.Width ~ iris$Species)
summary(m1)[4]
---
title: "markdown.analysis"
author: "Thor Veen"
date: "13/01/2021"
output: html_document
---
```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
read_chunk("4.markdown.analysis.R")
```
For this analysis we segmented code in the R script 4.markdown.analysis.R into code chunks and named them. In the Markdown file you can now call these chunks by their names.
## data inspection
Check the Iris data set
```{r one, echo = FALSE}
```
## analysis
Let's see of the sepal width differs among the species.
Show the coefficient table
```{r three, echo = TRUE}
```
## visualisation
Plot the sepal width vs height. Show all the code (echo = TRUE, the default)
```{r two, echo = TRUE}
```
---
title: "markdown.analysis"
author: "Thor Veen"
date: "13/01/2021"
output: html_document
---
```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
read_chunk("4.markdown.analysis.R")
```
---
title: "markdown.analysis"
author: "Thor Veen"
date: "13/01/2021"
output: html_document
---
```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
read_chunk("4.markdown.analysis.R")
```
---
title: "markdown.analysis"
author: "Thor Veen"
date: "13/01/2021"
output: html_document
---
---
title: "markdown.analysis"
author: "Thor Veen"
date: "13/01/2021"
output: html_document
---
---
title: "markdown example.simple"
output: html_document
---
---
title: "markdown example.simple"
output: html_document
---
Markdown has *all* kinds of **options** for text lay^out^ including different levels of headers.
# Big
## Big-ish
### Medium
The great thing is that you can mix the text and and the code. If you don't want the code to be shown, you just type 'echo = FALSE. In general this is a good method for small-ish code projects. I find that it gets quite messy quickly, with your R code more fragmented.
If you just read one summary file you can do it this way, or you want to do a couple of analyses only, and each go into a new markdown file.
Let's start an analyses.
```{r}
# simulate data for x and y
x.t <- rnorm(10, 5, 2)
y.t <- rnorm(10, 6, 1)
```
If we do 'echo = FALSE' we only get what you output, here a graph.
```{r, echo=FALSE}
# produce a plot of x and y
plot(x.t, y.t, xlab = "x variable", ylab = "y variable", pch = 19, col = "blue", las = 1)
```
### random stats
Let's do some stats.
```{r, echo=FALSE}
summary(lm(y.t ~ x.t))
```
It is easy to add things inline, for example the p = `r  summary(lm(y.t ~ x.t))$coefficient[2, 4]` value for the test if the slope is different from 0. This is quite handy as it will be updated when we add more data or redo the analyses (rerun and the p value should change with new data).
Wicked. Of course we can use standard R functions like *round()* to make it better p = `r  round(summary(lm(y.t ~ x.t))$coefficient[2, 4],3)`
There are some other tricks to e.g. format a formula etc but it is less sophisticated than LateX for example. For me it is mainly useful for a working document, not really a manuscript.
# === description ===========================================================================
# scrip with analysis to show how to link Markdown and analysis code
# ******************************************************************************
## use descriptive names
# 1) data inspection
# 2) visualisation
# 3) analysis
# === 1) data inspection =======================================================
## @knitr one.analysis
# let's see the first six rows of the iris data set
d <- 3
d
## @knitr one
head(iris)
## @knitr one.end
# === 2) visualisation ===========================================================
## @knitr two
# let's make a graph of the sepal length vs sepal width
plot(iris$Sepal.Length, iris$Sepal.Width, xlab = "sepal length (cm)", ylab =
"sepal width (cm)", pch = 19, col = "grey")
# === 3) analysis ===========================================================
## @knitr three
# test of the sepal width differs for different species
m1 <- lm(iris$Sepal.Width ~ iris$Species)
summary(m1)[4]
---
title: "markdown.analysis"
author: "Thor Veen"
date: "13/01/2021"
output: html_document
---
```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
read_chunk("4.markdown.analysis.R")
```
---
title: "markdown.analysis"
author: "Thor Veen"
date: "13/01/2021"
output: html_document
---
```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
read_chunk("4.markdown.analysis.R")
```
For this analysis we segmented code in the R script 4.markdown.analysis.R into code chunks and named them. In the Markdown file you can now call these chunks by their names.
## data inspection
Check the Iris data set
```{r one, echo = FALSE}
```
## analysis
Let's see of the sepal width differs among the species.
Show the coefficient table
```{r three, echo = TRUE}
```
## visualisation
Plot the sepal width vs height. Show all the code (echo = TRUE, the default)
```{r two, echo = TRUE}
```
